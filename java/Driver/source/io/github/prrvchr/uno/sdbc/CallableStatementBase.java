/*
╔════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                    ║
║   Copyright (c) 2020 https://prrvchr.github.io                                     ║
║                                                                                    ║
║   Permission is hereby granted, free of charge, to any person obtaining            ║
║   a copy of this software and associated documentation files (the "Software"),     ║
║   to deal in the Software without restriction, including without limitation        ║
║   the rights to use, copy, modify, merge, publish, distribute, sublicense,         ║
║   and/or sell copies of the Software, and to permit persons to whom the Software   ║
║   is furnished to do so, subject to the following conditions:                      ║
║                                                                                    ║
║   The above copyright notice and this permission notice shall be included in       ║
║   all copies or substantial portions of the Software.                              ║
║                                                                                    ║
║   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,                  ║
║   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES                  ║
║   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.        ║
║   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY             ║
║   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,             ║
║   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE       ║
║   OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                    ║
║                                                                                    ║
╚════════════════════════════════════════════════════════════════════════════════════╝
*/
package io.github.prrvchr.uno.sdbc;

import java.io.Reader;
import java.nio.charset.Charset;
import java.util.Map;

import org.apache.commons.io.input.ReaderInputStream;

import com.sun.star.beans.Property;
import com.sun.star.container.XNameAccess;
import com.sun.star.io.XInputStream;
import com.sun.star.lib.uno.adapter.InputStreamToXInputStreamAdapter;
import com.sun.star.sdbc.SQLException;
import com.sun.star.sdbc.XArray;
import com.sun.star.sdbc.XBlob;
import com.sun.star.sdbc.XClob;
import com.sun.star.sdbc.XOutParameters;
import com.sun.star.sdbc.XRef;
import com.sun.star.sdbc.XRow;
import com.sun.star.uno.XComponentContext;
import com.sun.star.util.Date;
import com.sun.star.util.DateTime;
import com.sun.star.util.Time;

import io.github.prrvchr.uno.helper.UnoHelper;


public abstract class CallableStatementBase
extends PreparedStatementMain
implements XOutParameters,
           XRow
{
	private java.sql.Connection m_Connection;
	private java.sql.CallableStatement m_Statement = null;
	private String m_Sql;
	
	// The constructor method:
	public CallableStatementBase(XComponentContext context,
								  String name,
								  String[] services,
								  ConnectionBase xConnection,
								  java.sql.Connection connection,
								  String sql)
	{
		super(context, name, services, xConnection);
		m_Connection = connection;
		m_Sql= sql;
		System.out.println("sdbc.BaseCallableStatement() 1: '" + sql + "'");
	}
	public CallableStatementBase(XComponentContext context,
								  String name,
								  String[] services,
								  ConnectionBase xConnection,
								  java.sql.Connection connection,
								  String sql,
								  Map<String, Property> properties)
	{
		super(context, name, services, xConnection, properties);
		m_Connection = connection;
		m_Sql= sql;
		System.out.println("sdbc.BaseCallableStatement() 1: '" + sql + "'");
	}


	protected java.sql.CallableStatement _getStatement()
	{
	if (m_Statement == null)
	{
		try {
			m_Statement = m_Connection.prepareCall(m_Sql, m_ResultSetType, m_ResultSetConcurrency, m_AutoGeneratedKeys);
			_setStatement(m_Statement);
		} catch (java.sql.SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	return m_Statement;
	}

	protected java.sql.CallableStatement _getWrapper()
	{
		return m_Statement;
	}


	// com.sun.star.sdbc.XOutParameters:
	@Override
	public void registerNumericOutParameter(int index, int type, int scale) throws SQLException
	{
		try
		{
			_getStatement().registerOutParameter(index, type, scale);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public void registerOutParameter(int index, int type, String name) throws SQLException
	{
		try
		{
			_getStatement().registerOutParameter(index, type, name);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}


	// com.sun.star.sdbc.XRow:
	@Override
	public XArray getArray(int index) throws SQLException
	{
		try
		{
			java.sql.Array array = _getStatement().getArray(index);
			return (array != null) ? new Array(array) : null;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public XInputStream getBinaryStream(int index) throws SQLException
	{
		try
		{
			Reader value = _getStatement().getNCharacterStream(index);
			return (value != null) ? new InputStreamToXInputStreamAdapter(new ReaderInputStream(value, Charset.forName("UTF-8"))) : null;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public XBlob getBlob(int index) throws SQLException
	{
		try
		{
			java.sql.Blob blob = _getStatement().getBlob(index);
			return (blob != null) ? new Blob(blob) : null;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public boolean getBoolean(int index) throws SQLException
	{
		try
		{
			return _getStatement().getBoolean(index);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public byte getByte(int index) throws SQLException
	{
		try
		{
			return _getStatement().getByte(index);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public byte[] getBytes(int index) throws SQLException
	{
		try
		{
			byte[] value = _getStatement().getBytes(index);
			return (value != null) ? value : new byte[0];
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public XInputStream getCharacterStream(int index) throws SQLException
	{
		// TODO: Implement me!!!
		return null;
	}

	@Override
	public XClob getClob(int index) throws SQLException
	{
		try
		{
			java.sql.Clob value = _getStatement().getClob(index);
			return (value != null) ? new Clob(value) : null;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public Date getDate(int index) throws SQLException
	{
		try
		{
			java.sql.Date value = _getStatement().getDate(index);
			return (value != null) ? UnoHelper.getUnoDate(value) : null;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public double getDouble(int index) throws SQLException
	{
		try
		{
			return _getStatement().getDouble(index);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public float getFloat(int index) throws SQLException
	{
		try
		{
			return _getStatement().getFloat(index);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public int getInt(int index) throws SQLException
	{
		try
		{
			return _getStatement().getInt(index);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public long getLong(int index) throws SQLException
	{
		try
		{
			return _getStatement().getLong(index);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public Object getObject(int index, XNameAccess map) throws SQLException
	{
		try
		{
			System.out.println("SuperCallableStatement.getObject() : '" + index + "' - '" + map + "'");
			Object value =   _getStatement().getObject(index);
			return value;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public XRef getRef(int index) throws SQLException
	{
		// TODO: Implement me!!!
		return null;
	}

	@Override
	public short getShort(int index) throws SQLException
	{
		try
		{
			return _getStatement().getShort(index);
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public String getString(int index) throws SQLException
	{
		try
		{
			String value = _getStatement().getString(index);
			return (value != null) ? value : "";
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public Time getTime(int index) throws SQLException
	{
		try
		{
			java.sql.Time value = _getStatement().getTime(index);
			return (value != null) ? UnoHelper.getUnoTime(value) : null;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public DateTime getTimestamp(int index) throws SQLException
	{
		try
		{
			java.sql.Timestamp value = _getStatement().getTimestamp(index);
			return (value != null) ? UnoHelper.getUnoDateTime(value) : null;
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}

	@Override
	public boolean wasNull() throws SQLException
	{
		try
		{
			return _getStatement().wasNull();
		} catch (java.sql.SQLException e)
		{
			throw UnoHelper.getSQLException(e, this);
		}
	}


}
