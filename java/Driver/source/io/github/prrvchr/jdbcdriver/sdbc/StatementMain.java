/*
╔════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                    ║
║   Copyright (c) 2020 https://prrvchr.github.io                                     ║
║                                                                                    ║
║   Permission is hereby granted, free of charge, to any person obtaining            ║
║   a copy of this software and associated documentation files (the "Software"),     ║
║   to deal in the Software without restriction, including without limitation        ║
║   the rights to use, copy, modify, merge, publish, distribute, sublicense,         ║
║   and/or sell copies of the Software, and to permit persons to whom the Software   ║
║   is furnished to do so, subject to the following conditions:                      ║
║                                                                                    ║
║   The above copyright notice and this permission notice shall be included in       ║
║   all copies or substantial portions of the Software.                              ║
║                                                                                    ║
║   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,                  ║
║   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES                  ║
║   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.        ║
║   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY             ║
║   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,             ║
║   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE       ║
║   OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                    ║
║                                                                                    ║
╚════════════════════════════════════════════════════════════════════════════════════╝
*/
package io.github.prrvchr.jdbcdriver.sdbc;

import java.util.LinkedHashMap;
import java.util.Map;

import com.sun.star.beans.Property;
import com.sun.star.sdbc.SQLException;
import com.sun.star.sdbc.XCloseable;
import com.sun.star.sdbc.XGeneratedResultSet;
import com.sun.star.sdbc.XMultipleResults;
import com.sun.star.sdbc.XResultSet;
import com.sun.star.uno.XComponentContext;
import com.sun.star.util.XCancellable;

import io.github.prrvchr.jdbcdriver.DriverProvider;
import io.github.prrvchr.jdbcdriver.helper.UnoHelper;


public abstract class StatementMain
    extends WarningsSupplierProperty<java.sql.Statement>
    implements XCancellable,
               XCloseable,
               XGeneratedResultSet,
               XMultipleResults
{

    protected final XComponentContext m_xContext;
    protected final DriverProvider m_provider;
    private String m_CursorName = "";
    private int m_FetchDirection = java.sql.ResultSet.FETCH_FORWARD;
    private int m_FetchSize = 0;
    private int m_MaxFieldSize = 0;
    private int m_MaxRows = 0;
    private int m_QueryTimeout = 0;
    // FIXME: We are doing lazy loading on Statement because we need this property to create one!!!
    protected int m_ResultSetConcurrency = java.sql.ResultSet.CONCUR_READ_ONLY;
    // FIXME: We are doing lazy loading on Statement because we need this property to create one!!!
    protected int m_ResultSetType = java.sql.ResultSet.TYPE_FORWARD_ONLY;
    protected int m_AutoGeneratedKeys = java.sql.Statement.RETURN_GENERATED_KEYS;
    private static Map<String, Property> _getPropertySet()
    {
        Map<String, Property> map = new LinkedHashMap<String, Property>();
        map.put("CursorName", UnoHelper.getProperty("CursorName", "string"));
        map.put("FetchDirection", UnoHelper.getProperty("FetchDirection", "long"));
        map.put("FetchSize", UnoHelper.getProperty("FetchSize", "long"));
        map.put("MaxFieldSize", UnoHelper.getProperty("MaxFieldSize", "long"));
        map.put("MaxRows", UnoHelper.getProperty("MaxRows", "long"));        
        map.put("QueryTimeout", UnoHelper.getProperty("QueryTimeout", "long"));
        map.put("ResultSetConcurrency", UnoHelper.getProperty("ResultSetConcurrency", "long"));
        map.put("ResultSetType", UnoHelper.getProperty("ResultSetType", "long"));
        return map;
    }
    private static Map<String, Property> _getPropertySet(Map<String, Property> properties)
    {
        Map<String, Property> map = _getPropertySet();
        map.putAll(properties);
        return map;
    }

    // The constructor method:
    public StatementMain(XComponentContext context,
                          String name,
                          String[] services,
                          DriverProvider provider,
                          Map<String, Property> properties)
    {
        super(name, services, provider.supportWarningsSupplier(), _getPropertySet(properties));
        m_xContext = context;
        m_provider = provider;
    }
    public StatementMain(XComponentContext context,
                          String name,
                          String[] services,
                          DriverProvider provider)
    {
        super(name, services, provider.supportWarningsSupplier(), _getPropertySet());
        m_xContext = context;
        m_provider = provider;
    }


    abstract protected XResultSet _getResultSet(XComponentContext ctx,
                                                java.sql.ResultSet resultset)
        throws java.sql.SQLException;


    protected void _setCursorName(String cursor)
    {
        m_CursorName = cursor;
        if (_getWrapper() != null)
        {
            try {
                _getWrapper().setCursorName(cursor);
            } catch (java.sql.SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    protected String _getCursorName()
    {
        return m_CursorName;
    }

    protected void _setFetchDirection(int value)
    {
        m_FetchDirection = value;
        if (_getWrapper() != null)
        {
            try {
                _getWrapper().setFetchDirection(value);
            } catch (java.sql.SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    protected int _getFetchDirection()
    {
        return m_FetchDirection;
    }

    protected void _setFetchSize(int value)
    {
        m_FetchSize = value;
        if (_getWrapper() != null)
        {
            try {
                _getWrapper().setFetchSize(value);
            } catch (java.sql.SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    protected int _getFetchSize()
    {
        return m_FetchSize;
    }

    protected void _setMaxFieldSize(int value)
    {
        m_MaxFieldSize = value;
        if (_getWrapper() != null)
        {
            try {
                _getWrapper().setMaxFieldSize(value);
            } catch (java.sql.SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    protected int _getMaxFieldSize()
    {
        return m_MaxFieldSize;
    }

    protected void _setMaxRows(int value)
    {
        m_MaxRows = value;
        if (_getWrapper() != null)
        {
            try {
                _getWrapper().setMaxRows(value);
            } catch (java.sql.SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    protected int _getMaxRows()
    {
        return m_MaxRows;
    }

    protected void _setQueryTimeout(int value)
    {
        m_QueryTimeout = value;
        if (_getWrapper() != null)
        {
            try {
                _getWrapper().setQueryTimeout(value);
            } catch (java.sql.SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    protected int _getQueryTimeout()
    {
        return m_QueryTimeout;
    }

    protected void _setResultSetConcurrency(int value)
    {
        // FIXME: We are doing lazy loading on Statement because we need this property to create one!!!
        if (_getWrapper() == null)
        {
            m_ResultSetConcurrency = value;
        }
    }
    protected int _getResultSetConcurrency()
    {
        return m_ResultSetConcurrency;
    }

    protected void _setResultSetType(int value)
    {
        // FIXME: We are doing lazy loading on Statement because we need this property to create one!!!
        if (_getWrapper() == null)
        {
            m_ResultSetType = value;
        }
    }
    protected int _getResultSetType()
    {
        return m_ResultSetType;
    }


    // com.sun.star.util.XCancellable:
    @Override
    public void cancel()
    {
        try
        {
            _getStatement().cancel();
        } catch (java.sql.SQLException e)
        {
            // pass
        }
    }

    // com.sun.star.sdbc.XCloseable
    @Override
    public void close() throws SQLException
    {
        try
        {
            _getStatement().close();
        } catch (java.sql.SQLException e)
        {
            // pass
        }
    }


    // com.sun.star.sdbc.XGeneratedResultSet:
    @Override
    public XResultSet getGeneratedValues() throws SQLException
    {
        System.out.println("sdbc.MainStatement.getGeneratedValues() 1");
        XResultSet resultset = null;
        try
        {
            java.sql.ResultSet rs = _getStatement().getGeneratedKeys();
            if (rs != null) {
                System.out.println("sdbc.MainStatement.getGeneratedValues() 2");
                resultset = _getResultSet(m_xContext, rs);
            }
            else
                System.out.println("sdbc.MainStatement.getGeneratedValues() 3");
        } catch (java.sql.SQLException e)
        {
            throw UnoHelper.getSQLException(e, this);
        }
        System.out.println("sdbc.MainStatement.getGeneratedValues() 4");
        return resultset;
    }


    // com.sun.star.sdbc.XMultipleResults:
    @Override
    public boolean getMoreResults() throws SQLException
    {
        try
        {
            return _getStatement().getMoreResults();
        } catch (java.sql.SQLException e)
        {
            throw UnoHelper.getSQLException(e, this);
        }
    }

    @Override
    public XResultSet getResultSet() throws SQLException
    {
        try
        {
            java.sql.ResultSet resultset = _getStatement().getResultSet();
            return _getResultSet(m_xContext, resultset);
        } catch (java.sql.SQLException e)
        {
            throw UnoHelper.getSQLException(e, this);
        }
    }

    @Override
    public int getUpdateCount() throws SQLException
    {
        try
        {
            return _getStatement().getUpdateCount();
        } catch (java.sql.SQLException e)
        {
            throw UnoHelper.getSQLException(e, this);
        }
    }


    protected abstract java.sql.Statement _getStatement() throws java.sql.SQLException;


    protected void _setStatement(java.sql.Statement statement)
    throws java.sql.SQLException
    {
        if (m_CursorName != "")
            statement.setCursorName(m_CursorName);
        statement.setFetchDirection(m_FetchDirection);
        statement.setFetchSize(m_FetchSize);
        statement.setMaxFieldSize(m_MaxFieldSize);
        statement.setMaxRows(m_MaxRows);
        statement.setQueryTimeout(m_QueryTimeout);
    }


}
